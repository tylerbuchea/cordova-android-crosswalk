#!/usr/bin/env node

/**
 * Dependencies
 */
var Q = require('q');
var fs = require('fs-extra');
var xml2js = require('xml2js');
var log = require('verbalize');
var Download = require('download');
var progress = require('download-status');
var exec = require('child-process-promise').exec;
var argv = require('minimist')(process.argv.slice(2));

/**
 * Namespace
 */
var Runtime = {
  /**
   * Is this running on Windows?
   */
  isWin: /^win/.test(process.platform),

  /**
   * Tool Version
   */
  version: '0.3.3',

  /**
   * Release Versions
   * Latest versions of crosswalk bundles
   * We must pressure crosswalk-project.org to offer a 'latest-release' url for each release channel
   */
  ReleaseVersions: {
    stable: '12.41.296.5',
    beta: '13.42.319.1',
    canary: '14.42.329.0'
  },

  /**
   * Required Platforms
   * Each release of Crosswalk requires a different version of the
   * android platform
   */
  RequiredPlatforms: {
    stable: '3.6.3',
    beta: '3.6.3',
    canary: '3.6.3'
  },

  /**
   * Tool arguments
   * Use `-r` or `--release` to specify Crosswalk release channel
   * Use `-x` or `--xwalk-version` to specify Crosswalk release version
   * Use `-t` or `--target` to specify the target android version
   * Use `-a` or `--arch` to choose between arm and x86 architectures (defaults to both)
   * Use `-p` or `--preserve` to maintain existing Crosswalk bundle
   */
  Args: {
    release: argv._[0] || argv.r || argv.release || 'stable',
    xwalkVersion: argv._[1] || argv.x || argv['xwalk-version'] || null,
    target: argv._[2] || argv.t || argv.target || null,
    arch: argv._[3] || argv.a || argv.arch || null,
    preserve: argv._[4] || argv.p || argv.preserve,
    force: argv._[5] || argv.f || argv.force || null,
    help: argv._[6] || argv.h || argv.help || null,
    version: argv._[7] || argv.v || argv.version || null
  },

  /**
   * Void Main
   */
  main: function() {
    Runtime.init();
    if(Runtime.Args.target) {
      Runtime.checkEnv();
    } else {
      Runtime.getSDKTarget();
    }
  },

  init: function() {
    Runtime.Args.xwalkVersion = Runtime.Args.xwalkVersion || Runtime.ReleaseVersions[Runtime.Args.release];
    Runtime.xwalkDestination = __dirname + '/downloads/crosswalk-' + Runtime.Args.release;
    Runtime.armReleaseChannel = [
      'https://download.01.org/crosswalk/releases/crosswalk/android',
      Runtime.Args.release,
      Runtime.Args.xwalkVersion,
      'arm/crosswalk-cordova-' + Runtime.Args.xwalkVersion + '-arm.zip'
    ].join('/');
    Runtime.x86ReleaseChannel = Runtime.armReleaseChannel.replace(/arm/g,'x86');
  },

  /**
   * Get SDK target
   */
  getSDKTarget: function() {
    exec('android list target -c')
      .then(function(result) {
        var androidList = result.stdout.match(/w*android-\w*/g);
        Runtime.Args.target = androidList[androidList.length - 1];

        log.writeln('Found SDK target: ' + Runtime.Args.target);
        Runtime.checkEnv();
      })
      .fail(function(err) {
        log.error(err);
      });
  },

  /**
   * Check if this is a Cordova project with Android platform added
   */
  checkEnv: function() {
    fs.readFile('./platforms/android/AndroidManifest.xml',
      function(err) {
        if(err) {
          log.error(err);
          log.writeln('Either this is not the root folder of a Cordova Project');
          log.writeln('Or you have yet to add the android platform "cordova platform add android@' +
          	Runtime.RequiredPlatforms[Runtime.Args.release] + '"');
        } else {
          Runtime.checkCordovaVersion();
        }
      });
  },

  /**
   * Check Cordova version
   */
  checkCordovaVersion: function() {
    var printCmd = Runtime.isWin ?
    	'cd platforms/android/cordova && type version' :
    	'cat platforms/android/cordova/version';
    exec(printCmd)
      .then(function(result) {
      	var versionNumber = new RegExp('\\w*' + Runtime.RequiredPlatforms[Runtime.Args.release] + '\\w*');
        var isCorrectVersion = result.stdout.match(versionNumber);

        if(isCorrectVersion || Runtime.Args.force) {
          log.writeln('You\'re already running Cordova ' +
          	Runtime.RequiredPlatforms[Runtime.Args.release] +
          	'. Good job!');
          Runtime.downloadCrosswalk();
        } else {
          log.writeln('Crosswalk ' +
          	Runtime.Args.release + ' requires the android platform v' +
          	Runtime.RequiredPlatforms[Runtime.Args.release] +'!');
          log.writeln('First remove your current android platform "cordova platform remove android"');
          log.writeln('Then add it back while specificying the version "cordova platform add android@' +
          	Runtime.RequiredPlatforms[Runtime.Args.release] + '"');
          log.writeln('If you know what you\'re doing you can use force "-f" to suppress this warning');
        }
      })
      .fail(function(err) {
        log.error(err);
      });
  },

  /**
   * Download latest Crosswalk version
   */
  downloadCrosswalk: function() {

    var architectures = ['arm', 'x86'],
      download = new Download({ extract: true, strip: 1, mode: '755' })
        .dest(Runtime.xwalkDestination)
        .use(progress()),
      architecture;

    // Preserves Crosswalk bundle if flag is present
    if(Runtime.Args.preserve && fs.existsSync(Runtime.xwalkDestination)) {
      log.writeln('Preserving current Crosswalk ' + Runtime.Args.release);
      Runtime.buildReplace();
      return;
    }

    // Set up Crosswalk download
    architecture = architectures[architectures.indexOf(Runtime.Args.arch)];
    if(architecture) {
      log.writeln('Downloading Crosswalk for ' + architecture);
      download.get(Runtime[architecture + 'ReleaseChannel']);
    } else {
      log.writeln('Downloading Crosswalk for arm and x86');
      download.get(Runtime.armReleaseChannel).get(Runtime.x86ReleaseChannel);
    }

    // Remove previously downloaded Crosswalk version
    fs.remove(Runtime.xwalkDestination,
      function(err){
        if(err) {
          log.error(err);
        } else {
          log.writeln('Removed old Crosswalk ' + Runtime.Args.release);
        }
      });

    // Start Downloading
    download.run(
      function (err) {
        if(err) {
          log.error(err);
        } else {
          log.writeln('Crosswalk ' + Runtime.Args.release + ' downloaded succesfully');
          Runtime.buildReplace();
        }
      });

  },

  /**
   * Replace 'CordovaLib' folder with Crosswalk's 'framework' folder
   * rm -Rf platforms/android/CordovaLib/*
   * cp -a <path_to_unpacked_bundle>/framework/* \ platforms/android/CordovaLib/
   * Replace 'VERSION' file with Crosswalk 'VERSION' file
   * cp -a <path_to_bundle>/VERSION platforms/android/
   */
  buildReplace: function() {
    var defer = Q.defer();

    // Delete CordovaLib folder
    fs.remove('./platforms/android/CordovaLib', defer.resolve);

    // Replace with Crosswalks framework folder
    defer.promise.then(function() {
      log.writeln('Removed old CordovaLib');
      fs.copy(Runtime.xwalkDestination + '/framework', './platforms/android/CordovaLib', defer.resolve);
    });

    // Replace VERSION file
    defer.promise.then(function() {
      log.writeln('./platforms/android/CordovaLib was replaced with the Crosswalk ' + Runtime.Args.release + ' framework');
      fs.copy(Runtime.xwalkDestination + '/VERSION', './platforms/android/VERSION', defer.resolve);
    });

    // Build Permissions
    defer.promise.then(function() {
      log.writeln('./platforms/android/VERSION file was replaced with Crosswalk VERSION file');
      Runtime.buildPermissions();
    });

    // Catch all errors
    defer.promise.catch(function(err) {
      log.error(err);
    });

  },

  /**
   * Add correct permisions for Crosswalk to AndroidManifest.xml
   * platforms/android/AndroidManifest.xml, adding these lines just before the existing <application> element:
   * <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
   * <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
   */
  buildPermissions: function() {
    var parser = new xml2js.Parser();

    // Read AndroidManifest.xml
    fs.readFile('./platforms/android/AndroidManifest.xml', function(err, data) {
      if(err) {
        throw(err);
      }

      // Parse XML to JSON
      parser.parseString(data, function (err, result) {
        if(err) {
          throw(err);
        }

        // Has Permission
        var hasPermission = {
          wifi: false,
          network: false
        };

        // Make sure uses-permissions array exists
        result.manifest['uses-permission'] = result.manifest['uses-permission'] || [];

        // Check if Permissions have already been added
        for(var i=0; i<result.manifest['uses-permission'].length; i++) {
          if(JSON.stringify(result.manifest['uses-permission'][i]) === '{"$":{"android:name":"android.permission.ACCESS_WIFI_STATE"}}') {
            hasPermission.wifi = true;
          }
          if(JSON.stringify(result.manifest['uses-permission'][i]) === '{"$":{"android:name":"android.permission.ACCESS_NETWORK_STATE"}}') {
            hasPermission.network = true;
          }
        }

        // Add permissions to JSON object
        if(!hasPermission.wifi) {
          result.manifest['uses-permission']
            .push({ '$': { 'android:name': 'android.permission.ACCESS_WIFI_STATE' } });
        }
        if(!hasPermission.network) {
          result.manifest['uses-permission']
            .push({ '$': { 'android:name': 'android.permission.ACCESS_NETWORK_STATE' } });
        }

        // Convert JSON back to XML
        var builder = new xml2js.Builder();
        var xml = builder.buildObject(result);

        // Update XML file
        fs.outputFile('./platforms/android/AndroidManifest.xml', xml, function(err) {
          if(err) {
            throw(err);
          } else {
            log.writeln('Added AndroidManifest.xml permissions');
            Runtime.buildFinal();
          }
        });

      });
    });
  },

  /**
   * Run the final build commands
   * export ANDROID_HOME=$(dirname $(dirname $(which android)))
   * cd platforms/android/CordovaLib/
   * android update project --subprojects --path . --target "android-19"
   * ant debug
   * rm -Rf ant-gen
   * rm -Rf ant-build
   */
  buildFinal: function() {
    var pathCmd = Runtime.isWin ? 'SET' : 'export';
    var removeCmd = Runtime.isWin ? ' IF EXIST rd /S /Q ' : ' rm -Rf ';
    var commands = pathCmd +
    ' ANDROID_HOME=$(dirname $(dirname $(which android))) &&' +
    ' cd platforms/android/CordovaLib/ &&' +
    ' android update project --subprojects --path . --target "' + Runtime.Args.target + '" &&' +
    ' ant debug &&' +
    ' cd .. &&' +
    removeCmd + ' ant-gen &&' +
    removeCmd + ' ant-build';

    // Executes the custom tidy up commands
    exec(commands)
      .then(function(result) {
        log.writeln(result.stdout);
        log.writeln('Congratulations! you are now using Crosswalk ' + Runtime.Args.release + '. Go ahead and and try it out "cordova run android"');
      })
      .fail(function(err) {
        log.error(err);
      });
  }

};

/**
 * Init Main
 */
if(Runtime.Args.help) {
	log.writeln('Command-line Flags/Options');
	log.writeln('\t -r, --release ');
	log.writeln('\t -t, --target');
	log.writeln('\t -p, --preserve');
	log.writeln('\t -x, --xwalk-version');
	log.writeln('\t -a, --arch');
	log.writeln('\t -f, --force');
	log.writeln('\t -h, --help');
	log.writeln('\t -v, --version');
} else if(Runtime.Args.version) {
	log.writeln(Runtime.version);
} else {
	Runtime.main();
}
